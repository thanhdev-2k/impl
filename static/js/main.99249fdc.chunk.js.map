{"version":3,"sources":["features/repos/redux/action-types/get-repos-by-username.ts","commons/styled.tsx","features/repos/redux/action-types/get-current-user.ts","features/repos/redux/action-types/get-list-stargazer.ts","features/repos/redux/actions/get-repos-by-username.ts","features/repos/redux/actions/get-current-user.ts","features/repos/redux/actions/get-list-stargazer.ts","features/repos/hooks/useGetListStargazer.ts","features/repos/components/ListStargazerModal.tsx","features/repos/components/ListRepo.tsx","features/repos/components/SearchBar.tsx","features/repos/hooks/useGetCurrentUser.ts","features/repos/hooks/useGetReposByUserName.ts","features/repos/pages/index.tsx","redux/actions.ts","App.tsx","services/api-base.ts","services/apis-url.ts","env.ts","features/services/url.ts","features/services/apis.ts","features/repos/redux/sagas/get-repos-by-username.ts","features/repos/redux/sagas/get-current-user.ts","features/repos/redux/sagas/get-list-stargazer.ts","features/repos/redux/sagas/index.ts","redux/sagas.ts","features/repos/redux/reducers/get-repos-by-username.ts","features/repos/redux/reducers/get-curent-user.ts","features/repos/redux/reducers/get-list-stargazer.ts","features/repos/redux/reducers/index.ts","redux/reducers.ts","redux/store.ts","index.tsx"],"names":["RepoStatus","CardContainer","styled","div","Container","GET_REPOS_BY_USERNAME","GET_REPOS_BY_USERNAME_SUCCESS","GET_REPOS_BY_USERNAME_ERROR","GET_CURRENT_USER_BY_USERNAME","GET_CURRENT_USER_BY_USERNAME_SUCCESS","GET_CURRENT_USER_BY_USERNAME_ERROR","GET_LIST_STARGAZERS","GET_LIST_STARGAZERS_SUCCESS","GET_LIST_STARGAZERS_ERROR","getReposByUsernameErrorAction","payload","type","getCurrentUserByUsernameErrorAction","getListStargazerErrorAction","useGetListStargazer","loading","useSelector","state","reposState","stargazer","data","dispatch","useDispatch","onGetListStargazer","useCallback","ListStargazersModal","isShow","toggleShow","url","total_stargzer","useState","pageIndex","setPageIndex","useEffect","loadMoreButton","style","textAlign","marginTop","height","lineHeight","disabled","onClick","visible","onCancel","footer","title","length","overflowY","maxHeight","scrollbarWidth","className","itemLayout","loadMore","dataSource","renderItem","item","Item","Meta","login","description","React","memo","ListRepo","total_repos","total_stargazer","setState","actions","stargazers_url","stargazers_count","name","ListStargazerModal","undefined","SearchBar","form","loaded_repos","gutter","span","rules","required","message","whitespace","placeholder","htmlType","useGetCurrentUserByUserName","user","total_public_repos","public_repos","onGetCurrentUserByUserName","useGetRepoByUserName","listRepo","userName","onGetRepoByUserName","ReposPageIndex","page_index","Form","useForm","loadingGetUser","onLoadMoreRepo","a","getFieldValue","onFinish","values","trim","toLowerCase","APP_STARTED","App","apiGet","Promise","resolve","reject","axios","get","then","res","catch","err","response","status","request","console","log","API_URL","apiBaseUrl","process","API_GET_REPOS_BY_USERNAME","getRepoByUserNameApi","apiUrl","getCurrentUserByNameApi","getListStargazerApi","getReposByUsernameSaga","action","apis","put","getCurrentUserByUsernameSaga","error","getListStargazerSaga","repoSaga","all","takeLatest","actionTypes","rootSaga","take","initialState","combineReducers","_data","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"uKAMYA,E,6ECHCC,EAAgBC,IAAOC,IAAV,4LASbC,EAAYF,IAAOC,IAAV,kH,4EDVTE,EAAwB,wBACxBC,EAAgC,gCAChCC,EAA8B,+B,SAE/BP,K,gBAAAA,E,mBAAAA,M,KEJL,IAAMQ,EAA+B,+BAC/BC,EAAuC,uCACvCC,EAAqC,qCCFrCC,EAAsB,sBACtBC,EAA8B,8BAC9BC,EAA4B,4BCU1BC,EAAgC,SAACC,GAAD,MAAoD,CAC/FC,KAAMT,EACNQ,YCDWE,EAAsC,SAACF,GAAD,MAA0D,CAC3GC,KAAMN,EACNK,YCHWG,EAA8B,SAACH,GAAD,MAAkD,CAC3FC,KAAMH,EACNE,YCYWI,EAnBa,WAC1B,IAAMC,EAAUC,aAAuB,SAACC,GAAD,OAAWA,EAAMC,WAAWC,UAAUJ,WACvEK,EAAOJ,aAAuB,SAACC,GAAD,OAAWA,EAAMC,WAAWC,UAAUC,QAEpEC,EAAWC,cAQjB,MAAO,CACLC,mBAPyBC,uBAAY,SAACJ,GACtCC,EDbA,CACAV,KAAML,EACNI,QCWgCU,MAGlC,IAIEL,UACAK,S,OCbEK,EAA0C,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,OAAOC,EAAiC,EAAjCA,WAAWC,EAAsB,EAAtBA,IAAIC,EAAkB,EAAlBA,eAAkB,EAE3Cf,IAApCS,EAF+E,EAE/EA,mBAAmBH,EAF4D,EAE5DA,KAAML,EAFsD,EAEtDA,QAFsD,EAIpDe,mBAAS,GAJ2C,mBAI/EC,EAJ+E,KAIpEC,EAJoE,KAMtFC,qBAAU,WACHP,GACCH,EAAmB,CAACK,IAAI,GAAD,OAAIA,EAAJ,iBAAgBG,OAI/C,CAACL,IAID,IASMQ,EAAkBnB,EAWlB,KAVF,qBACEoB,MAAO,CACLC,UAAW,SACXC,UAAW,GACXC,OAAQ,GACRC,WAAY,QALhB,SAQE,cAAC,IAAD,CAAQC,SAAUzB,EAASA,QAASA,EAAS0B,QAdlC,WACfT,EAAaD,EAAU,GACvBR,EAAmB,CAACK,IAAI,GAAD,OAAIA,EAAJ,iBAAgBG,EAAU,MAY7C,4BAIN,OACA,cAAC,IAAD,CAAOW,QAAShB,EAAQiB,SAvBT,WACXhB,KAsBuCiB,OAAQ,KAAMC,MAAO,qCAC9D,0DAD8D,4BAEhDzB,EAAK0B,OAF2C,aAEhCjB,MAFhC,SAII,cAAC,IAAD,CACAM,MAAO,CAACY,UAAU,SAAUT,OAAO,IAAIU,UAAU,IAAKC,eAAe,QACrEC,UAAU,qBACVnC,QAASA,EACToC,WAAW,aACXC,SAAUhC,EAAK0B,OAASjB,EAAiBK,EAAiB,KAC1DmB,WAAYjC,EACZkC,WAAY,SAAAC,GAAI,OAChB,cAAC,IAAKC,KAAN,UACE,cAAC,IAAKA,KAAKC,KAAX,CACAZ,MAAOU,EAAKG,MACXC,YAAW,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAMI,sBASfC,MAAMC,KAAKpC,GC/DpBqC,EAAoC,SAAC,GAA0C,IAAzC/C,EAAwC,EAAxCA,QAASK,EAA+B,EAA/BA,KAAMgC,EAAyB,EAAzBA,SAAUW,EAAe,EAAfA,YAAe,EAEvDjC,mBAAS,CAClCJ,QAAO,EACPE,IAAI,GACJoC,gBAAgB,IALgE,mBAEzE/C,EAFyE,KAElEgD,EAFkE,KAyB1E/B,EAAkBnB,EAWpB,KAVF,qBACEoB,MAAO,CACLC,UAAW,SACXC,UAAW,GACXC,OAAQ,GACRC,WAAY,QALhB,SAQE,cAAC,IAAD,CAAQC,SAAUzB,EAASA,QAASA,EAAS0B,QAlBhC,WACbW,KAiBA,4BAKJ,OAAO,qCACN,cAAC,IAAD,CACDjB,MAAO,CAACY,UAAU,SAAUT,OAAO,IAAIU,UAAU,IAAKC,eAAe,QACrEC,UAAU,qBACVnC,QAASA,EACToC,WAAW,aACXC,SAAUhC,EAAK0B,OAASiB,EAAc7B,EAAiB,KACvDmB,WAAYjC,EACZkC,WAAY,SAAAC,GAAI,OACd,eAAC,IAAKC,KAAN,CAEEU,QAAS,CAAE,cAAC,IAAD,CAAQzB,SA9BAb,EA8BuB2B,EAAKY,eA9BjBH,EA8BgCT,EAAKa,iBA9BZ,WACzDH,GAAS,SAAAhD,GAAK,kCAAOA,GAAP,IAAcW,IAAIA,EAAIoC,gBAAiBA,EAAgBtC,QAAQT,EAAMS,cA6BKf,KAAK,OAAhF,4BAA2F,uBAFxG,UAII,cAAC,IAAK6C,KAAKC,KAAX,CACEZ,MAAOU,EAAKc,KACZV,YAAW,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAMI,cAEpB,4DAAwBJ,EAAKa,uBApCd,IAACxC,EAAWoC,KAwChC,cAACM,EAAD,CAAoB5C,OAAQT,EAAMS,OAAQC,WApDrB,SAACe,GAEpBuB,OADoBM,WAAZ7B,EACC,2BAAIzB,GAAL,IAAWS,SAASgB,IAEnB,2BAAIzB,GAAL,IAAYS,OAAQT,EAAMS,WAgDmCE,IAAKX,EAAMW,IAAKC,eAAgBZ,EAAM+C,sBAIpGJ,MAAMC,KAAKC,G,2BCjEpBU,EAAoC,SAAC,GAA8C,EAA5CC,KAA6C,IAAvC1D,EAAsC,EAAtCA,QAAS2D,EAA6B,EAA7BA,aAAcX,EAAe,EAAfA,YAEtE,OACG,qCACC,eAAC,IAAD,CAAKY,OAAQ,GAAb,UACA,cAAC,IAAD,CAAKC,KAAM,GAAX,SACI,cAAC,IAAKpB,KAAN,CAAWqB,MAAO,CAAC,CAACC,UAAS,EAAMC,QAAQ,0BAA0B,CACjEC,YAAW,EAAKD,QAAQ,2BACxBV,KAAK,OAFT,SAGI,cAAC,IAAD,CAAOY,YAAY,qCAG3B,cAAC,IAAD,CAAKL,KAAM,EAAX,SACI,cAAC,IAAD,CAAQM,SAAS,SAASnE,QAASA,EAAnC,mCAIN,cAAC,IAAD,UACG,oDAAqBgD,GAA2B,OAEjD,cAAC,IAAD,UACE,uDAAgBW,EAAhB,YAAgCX,GAA2B,EAA3D,kBAMKH,MAAMC,KAAKW,GCRXW,EApBqB,WAClC,IAAMpE,EAAUC,aAAuB,SAACC,GAAD,OAAWA,EAAMC,WAAWkE,KAAKrE,WAClEsE,EAAqBrE,aAAuB,SAACC,GAAD,OAAWA,EAAMC,WAAWkE,KAAKhE,KAAKkE,gBAElFjE,EAAWC,cASjB,MAAO,CACLiE,2BARiC/D,uBAAY,SAACJ,GAE9CC,ENbA,CACAV,KAAMR,EACNO,QMWwCU,MAG1C,IAIEL,UACAsE,uBCKWG,EArBc,WAC3B,IAAMzE,EAAUC,aAAuB,SAACC,GAAD,OAAWA,EAAMC,WAAWuE,SAAS1E,WACtEK,EAAOJ,aAAuB,SAACC,GAAD,OAAWA,EAAMC,WAAWuE,SAASrE,QACnEsE,EAAW1E,aAAuB,SAACC,GAAD,OAAWA,EAAMC,WAAWuE,SAASC,YACvErE,EAAWC,cASjB,MAAO,CACLqE,oBAR0BnE,uBAAY,SAACJ,GAEvCC,ERdA,CACAV,KAAMX,EACNU,QQYkCU,MAGpC,IAIEL,UACAK,OACAsE,aChBEE,EAAyB,WAAK,IAAD,EAEN9D,mBAAS,CAC9B+D,WAAW,IAHgB,mBAExB5E,EAFwB,KAEjBgD,EAFiB,OAMhB6B,IAAKC,UAAbtB,EANwB,sBAQuBe,IAA/CG,EARwB,EAQxBA,oBAAqB5E,EARG,EAQHA,QAAQK,EARL,EAQKA,KAAKsE,EARV,EAQUA,SARV,EASmDP,IAA3EI,EATwB,EASxBA,2BAA4BF,EATJ,EASIA,mBAA6BW,EATjC,EASwBjF,QAEjDkF,EAAc,uCAAG,sBAAAC,EAAA,sEACbjC,GAAS,SAAAhD,GAAQ,OAAO,YAAC,eAAIA,GAAZ,IAAmB4E,WAAW5E,EAAM4E,WAAW,OADnD,OAEnBF,EAAoB,CAACD,SAASjB,EAAK0B,cAAc,QAAQN,WAAW5E,EAAM4E,WAAY,IAFnE,2CAAH,qDAcpB,OAAQ,cAACjG,EAAD,UACJ,eAAC,IAAD,CAAM6E,KAAMA,EAAM2B,SARL,SAACC,GAAc,IAAD,IAC4C,SAArE,UAAAX,EAASY,cAAT,eAAiBC,kBAAjB,UAAmCF,EAAOhC,KAAKiC,cAA/C,aAAmC,EAAoBC,iBACzDhB,EAA2B,CAACG,SAAQ,UAACW,EAAOhC,YAAR,iBAAC,EAAaiC,cAAd,aAAC,EAAqBC,gBAC1DZ,EAAoB,CAACD,SAAQ,UAACW,EAAOhC,YAAR,iBAAC,EAAaiC,cAAd,aAAC,EAAqBC,cAAcV,WAAW,MAK5E,UACG,cAAC,EAAD,CAAW9B,YAAasB,EAAoBX,aAActD,EAAK0B,OAAQ/B,QAASiF,GAAgBjF,EAAS0D,KAAMA,IAC9GrD,EAAK0B,OAAS,cAAC,EAAD,CAAUiB,YAAasB,EAAoBjE,KAAMA,EAAMgC,SAAU6C,EAAgBlF,QAASA,GAAWiF,IAAoB,WAKpIpC,MAAMC,KAAK+B,GC3CbY,EAAc,cCuBZC,MAdf,WACE,IAAMpF,EAAWC,cAMjB,OALAW,qBAAU,WACRZ,EDTK,CACLV,KAAM6F,MCUL,IAGA,cAACzG,EAAD,UACE,cAAC,EAAD,O,gDChBM2G,GAAM,uCAAG,WAAO9E,GAAP,SAAAsE,EAAA,+EACb,IAAIS,SAAQ,SAACC,EAASC,GAC3BC,KACGC,IAAInF,EAAK,IAGToF,MAAK,SAACC,GACLL,EAAQK,EAAI7F,SAEb8F,OAAM,SAACC,GACFA,EAAIC,SACsB,MAAxBD,EAAIC,SAASC,QAGfR,EAAOM,EAAIC,SAAShG,MAGlB+F,EAAIG,QACNT,EAAOM,EAAIG,SAEXC,QAAQC,IAAI,QAASL,EAAIpC,gBApBf,2CAAH,sDCEN0C,GAAO,UCAH,CACfC,WAAYC,0BDFkBD,YEDnBE,GAA0B,GAAD,OAAIH,GAAJ,WCKzBI,GAAoB,uCAAG,WAAOzG,GAAP,SAAA8E,EAAA,+EACzBQ,GAAOoB,GAAA,UAAoC1G,EAAKsE,SAAzC,uBAAgEtE,EAAKyE,cADnD,2CAAH,sDAInBkC,GAAuB,uCAAG,WAAO3G,GAAP,SAAA8E,EAAA,+EAC7BQ,GAAOoB,GAAA,UAAoC1G,EAAKsE,YADnB,2CAAH,sDAIxBsC,GAAmB,uCAAE,WAAMpG,GAAN,SAAAsE,EAAA,+EACvBQ,GAAO9E,IADgB,2CAAF,sD,YCNfqG,IAAV,SAAUA,GAAuBC,GAAjC,uEAEgC,OAFhC,kBAEsCC,GAA0BD,EAAOxH,SAFvE,OAGH,OADMuG,EAFH,gBAGGmB,ajBH0G,CAChHzH,KAAMV,EACNS,QiBC0CuG,IAHvC,8BAKH,OALG,mCAKGmB,aAAI3H,EAA6B,OAAC,EAAD,yBAAC,KAAOsE,UAL5C,sD,0BCDUsD,IAAV,SAAUA,GAA6BH,GAAvC,uEAEsC,OAFtC,kBAE4CC,GAA6BD,EAAOxH,SAFhF,OAGH,OADMuG,EAFH,gBAGGmB,ajBD4H,CAClIzH,KAAMP,EACNM,QiBDgDuG,IAH7C,8BAKH,OALG,mCAKGmB,aAAIxH,EAAmC,OAAC,EAAD,yBAAC,KAAOmE,UALlD,QAMHA,KAAQuD,MAAR,sDAAsB,KAAOvD,SAAW,GANrC,sD,gBCFUwD,IAAV,SAAUA,GAAqBL,GAA/B,uEAE8B,OAF9B,kBAEoCC,GAAyBD,EAAOxH,QAAQkB,KAF5E,OAGH,OADMqF,EAFH,gBAGGmB,ajBAoG,CAC1GzH,KAAMJ,EACNG,QiBFwCuG,IAHrC,8BAKH,OALG,mCAKGmB,aAAIvH,EAA2B,OAAC,EAAD,yBAAC,KAAOkE,UAL1C,sD,gBCAkByD,IAAV,SAAUA,KAAV,iEAEX,OAFW,KACNC,KADM,SAELC,aAAWC,EAAmCV,IAFzC,OAGX,OAHW,qBAGLS,aAAWC,EAA0CN,IAHhD,OAIX,OAJW,qBAILK,aAAWC,EAAgCJ,IAJtC,2H,gBCDUK,IAAV,SAAUA,KAAV,iEACb,OADa,SACPC,aAAKrC,GADE,OAEb,OAFa,SAEPiC,aAAI,CAACD,OAFE,wC,aCHPM,GAAe,CACnB1H,KAAK,GACLL,SAAS,EACT2E,SAAS,ICHPoD,GAAe,CACjB1H,KAAK,GACLL,SAAS,GCFL+H,GAAe,CACnB1H,KAAK,GACLL,SAAS,EACTa,IAAI,ICMSmH,eAAiC,CAC9CtD,SHJa,WAA2F,IAA1FxE,EAAyF,uDAAjF6H,GAAcZ,EAAmE,uCACvG,OAAQA,EAAOvH,MACb,KAAKX,EAEL,OAAGkI,EAAOxH,QAAQgF,WAAazE,EAAMyE,SAC5B,2BACFzE,GADL,IAEEG,KAAK,GACLL,SAAQ,EACR2E,SAASwC,EAAOxH,QAAQgF,WAGpB,2BACHzE,GADJ,IAECF,SAAS,EACT2E,SAASwC,EAAOxH,QAAQgF,WAG1B,KAAKzF,EACH,IAAM+I,EAAM,aAAK/H,EAAMG,MACvB,OAAO,2BACFH,GADL,IAEEG,KAAK,GAAD,oBAAK4H,GAAL,aAAed,EAAOxH,UAC1BK,SAAS,IAEb,KAAKb,EACH,OAAO,2BACFe,GADL,IAEEF,SAAS,EACTK,KAAK,KAET,QACE,OAAOH,IG3BXmE,KFNa,WAAuG,IAAtGnE,EAAqG,uDAA7F6H,GAAcZ,EAA+E,uCACnH,OAAQA,EAAOvH,MACb,KAAKR,EAEH,OAAO,2BACFc,GADL,IAEEF,SAAS,IAGb,KAAKX,EACH,OAAO,2BACFa,GADL,IAEEG,KAAK8G,EAAOxH,QACZK,SAAS,IAEb,KAAKV,EACH,OAAO,2BACFY,GADL,IAEEF,SAAS,EACTK,KAAK,KAET,QACE,OAAOH,IEfXE,UDNa,WAAuF,IAAtFF,EAAqF,uDAA7E6H,GAAcZ,EAA+D,uCACnG,OAAQA,EAAOvH,MACb,KAAKL,EACL,OAAG4H,EAAOxH,QAAQkB,MAAQX,EAAMW,IACvB,2BACFX,GADL,IAEEG,KAAK,GACLL,SAAQ,EACRa,IAAIsG,EAAOxH,QAAQkB,MAGf,2BACHX,GADJ,IAECF,SAAS,EACTa,IAAIsG,EAAOxH,QAAQkB,MAGrB,KAAKrB,EACH,IAAMyI,EAAM,aAAK/H,EAAMG,MACvB,OAAO,2BACFH,GADL,IAEEG,KAAK,GAAD,oBAAK4H,GAAL,aAAgBd,EAAOxH,UAC3BK,SAAS,IAEb,KAAKP,EACH,OAAO,2BACFS,GADL,IAEEF,SAAS,EACTK,KAAK,KAET,QACE,OAAOH,ME/BA8H,eAA2B,CACxC7H,gBCJI+H,GAAoBC,OAAeC,sCAAwCC,IAE3EC,GAAiBC,eAEjBC,GAAQC,YAAYC,GAAa,GAAIR,GAAiBS,YAAgBL,MAE5EA,GAAeM,IAAIf,IAEJW,UCLfK,IAASC,OAEL,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,EAAD,MAGJO,SAASC,eAAe,W","file":"static/js/main.99249fdc.chunk.js","sourcesContent":["\n\nexport const GET_REPOS_BY_USERNAME = 'GET_REPOS_BY_USERNAME';\nexport const GET_REPOS_BY_USERNAME_SUCCESS = 'GET_REPOS_BY_USERNAME_SUCCESS';\nexport const GET_REPOS_BY_USERNAME_ERROR = 'GET_REPOS_BY_USERNAME_ERROR';\n\nexport enum RepoStatus{\n    PUBLIC='public',\n    PRIVATE='private'\n}\n\nexport interface GetReposByUsernameInput{\n  userName: string;\n  page_index:number\n}\n\nexport interface GetReposByUsernameState {\n  loading: boolean;\n  data: any;\n  userName:string\n \n}\n\nexport interface GetReposByUsernameRes{\n    data: any\n}\n\nexport interface GetReposByUsernameAction {\n  type: typeof GET_REPOS_BY_USERNAME;\n  payload: GetReposByUsernameInput;\n}\n\nexport interface GetReposByUsernameActionSuccess {\n  type: typeof GET_REPOS_BY_USERNAME_SUCCESS;\n  payload: GetReposByUsernameRes;\n}\n\nexport interface GetReposByUsernameActionError {\n  type: typeof GET_REPOS_BY_USERNAME_ERROR;\n  payload: string;\n}\n\nexport type GetReposByUsernameActionTypes = GetReposByUsernameAction | GetReposByUsernameActionSuccess | GetReposByUsernameActionError;\n","\nimport styled from 'styled-components'\n\nexport const CardContainer = styled.div`\n    background-color: white;\n    width: 100%;\n    padding: 20px;\n    border-radius: 20px;\n    box-shadow: rgb(0 0 0 / 30%) 0px 1px 5px;\n    height: 100%;\n`\n\nexport const Container = styled.div`\nheight: 100vh;\n    background-color: rgb(243, 243, 243);\n    padding: 100px 200px;\n`","\n\nexport const GET_CURRENT_USER_BY_USERNAME = 'GET_CURRENT_USER_BY_USERNAME';\nexport const GET_CURRENT_USER_BY_USERNAME_SUCCESS = 'GET_CURRENT_USER_BY_USERNAME_SUCCESS';\nexport const GET_CURRENT_USER_BY_USERNAME_ERROR = 'GET_CURRENT_USER_BY_USERNAME_ERROR';\n\nexport interface GetCurrentUserByUsernameInput{\n  userName: string;\n}\n\nexport interface GetCurrentUserByUsernameState {\n  loading: boolean;\n  data: any\n \n}\n\nexport interface GetCurrentUserByUsernameRes{\n    data: any\n}\n\nexport interface GetCurrentUserByUsernameAction {\n  type: typeof GET_CURRENT_USER_BY_USERNAME;\n  payload: GetCurrentUserByUsernameInput;\n}\n\nexport interface GetCurrentUserByUsernameActionSuccess {\n  type: typeof GET_CURRENT_USER_BY_USERNAME_SUCCESS;\n  payload: GetCurrentUserByUsernameRes;\n}\n\nexport interface GetCurrentUserByUsernameActionError {\n  type: typeof GET_CURRENT_USER_BY_USERNAME_ERROR;\n  payload: string;\n}\n\nexport type GetCurrentUserByUsernameActionTypes = GetCurrentUserByUsernameAction | GetCurrentUserByUsernameActionSuccess | GetCurrentUserByUsernameActionError;\n","\n\nexport const GET_LIST_STARGAZERS = 'GET_LIST_STARGAZERS';\nexport const GET_LIST_STARGAZERS_SUCCESS = 'GET_LIST_STARGAZERS_SUCCESS';\nexport const GET_LIST_STARGAZERS_ERROR = 'GET_LIST_STARGAZERS_ERROR';\n\n\nexport interface GetListStagazerInput{\n    url:string\n}\n\nexport interface GetListStargazerState {\n  loading: boolean;\n  data: any;\n  url:string\n}\n\nexport interface GetListStargazerRes{\n    data: any\n}\n\nexport interface GetListStargazerAction {\n  type: typeof GET_LIST_STARGAZERS;\n  payload:GetListStagazerInput\n}\n\nexport interface GetListStargazerSuccessAction {\n  type: typeof GET_LIST_STARGAZERS_SUCCESS;\n  payload: GetListStargazerRes;\n}\n\nexport interface GetListStargazerActionError {\n  type: typeof GET_LIST_STARGAZERS_ERROR;\n  payload: string;\n}\n\nexport type GetListStargazerActionTypes = GetListStargazerAction | GetListStargazerSuccessAction | GetListStargazerActionError;\n","import {  GetReposByUsernameActionTypes, GetReposByUsernameInput, GetReposByUsernameRes, GET_REPOS_BY_USERNAME, GET_REPOS_BY_USERNAME_ERROR, GET_REPOS_BY_USERNAME_SUCCESS } from \"../action-types\";\n\n  export const getReposByUsernameAction = (payload: GetReposByUsernameInput): GetReposByUsernameActionTypes => (\n    {\n    type: GET_REPOS_BY_USERNAME,\n    payload,\n  }\n  );\n\n  export const getReposByUsernameSuccessAction = (payload: GetReposByUsernameRes):GetReposByUsernameActionTypes => ({\n    type: GET_REPOS_BY_USERNAME_SUCCESS,\n    payload,\n  });\n  \n  export const getReposByUsernameErrorAction = (payload: string):GetReposByUsernameActionTypes => ({\n    type: GET_REPOS_BY_USERNAME_ERROR,\n    payload,\n  });\n  ","import { GetCurrentUserByUsernameActionTypes, GetCurrentUserByUsernameInput, GetCurrentUserByUsernameRes, GET_CURRENT_USER_BY_USERNAME, GET_CURRENT_USER_BY_USERNAME_ERROR, GET_CURRENT_USER_BY_USERNAME_SUCCESS } from \"../action-types\";\n\n\n  export const getCurrentUserByUsernameAction = (payload: GetCurrentUserByUsernameInput): GetCurrentUserByUsernameActionTypes => (\n    {\n    type: GET_CURRENT_USER_BY_USERNAME,\n    payload,\n  }\n  );\n\n  export const getCurrentUserByUsernameSuccessAction = (payload: GetCurrentUserByUsernameRes):GetCurrentUserByUsernameActionTypes => ({\n    type: GET_CURRENT_USER_BY_USERNAME_SUCCESS,\n    payload,\n  });\n  \n  export const getCurrentUserByUsernameErrorAction = (payload: string):GetCurrentUserByUsernameActionTypes => ({\n    type: GET_CURRENT_USER_BY_USERNAME_ERROR,\n    payload,\n  });\n  ","import { GetListStagazerInput, GetListStargazerActionTypes, GetListStargazerRes, GET_LIST_STARGAZERS, GET_LIST_STARGAZERS_ERROR, GET_LIST_STARGAZERS_SUCCESS } from \"../action-types\";\n\n  export const getListStargazerAction = (payload:GetListStagazerInput): GetListStargazerActionTypes => (\n    {\n    type: GET_LIST_STARGAZERS,\n    payload\n  }\n  );\n\n  export const getListStargazerSuccessAction = (payload: GetListStargazerRes):GetListStargazerActionTypes => ({\n    type: GET_LIST_STARGAZERS_SUCCESS,\n    payload,\n  });\n  \n  export const getListStargazerErrorAction = (payload: string):GetListStargazerActionTypes => ({\n    type: GET_LIST_STARGAZERS_ERROR,\n    payload,\n  });\n  ","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/reducers';\nimport { GetListStagazerInput } from '../redux/action-types';\nimport { getListStargazerAction } from '../redux/actions';\n\n\n\n\nconst useGetListStargazer = () => {\n  const loading = useSelector<RootState>((state) => state.reposState.stargazer.loading) as boolean;\n  const data = useSelector<RootState>((state) => state.reposState.stargazer.data) as  any[] ;\n\n  const dispatch = useDispatch();\n\n  const onGetListStargazer = useCallback((data: GetListStagazerInput) => {\n    dispatch(getListStargazerAction(data));\n  },\n  // eslint-disable-next-line\n  []);\n\n  return {\n    onGetListStargazer,\n    loading,\n    data,\n  };\n};\n\nexport default useGetListStargazer;\n","import { Button, List, Modal } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport useGetListStargazer from '../hooks/useGetListStargazer'\n\ninterface ModalProps{\n    isShow:boolean;\n    toggleShow:(visible?:boolean)=>void\n    url:string;\n    total_stargzer:number\n}\n\nconst ListStargazersModal :React.FC<ModalProps>=({isShow,toggleShow,url,total_stargzer})=>{\n\n    const {onGetListStargazer,data, loading} = useGetListStargazer()\n\n    const [pageIndex, setPageIndex] = useState(1) \n   \n    useEffect(()=>{\n        if(isShow){\n            onGetListStargazer({url:`${url}?page=${pageIndex}`})\n        }\n    },\n    // eslint-disable-next-line\n    [isShow])\n\n\n\n    const onClose= ()=>{\n        toggleShow()\n    }\n\n    const onLoadMore=()=>{\n      setPageIndex(pageIndex+1)\n      onGetListStargazer({url:`${url}?page=${pageIndex+1}`})\n    }\n\n    const loadMoreButton = !loading ? (\n        <div\n          style={{\n            textAlign: 'center',\n            marginTop: 12,\n            height: 32,\n            lineHeight: '32px',\n          }}\n        >\n          <Button disabled={loading} loading={loading} onClick={onLoadMore}>loading more</Button>\n        </div>\n      ) : null;\n    \n    return (\n    <Modal visible={isShow} onCancel={onClose} footer={null} title={<>\n      <div>Danh sách stargazer </div>\n      {`Đã load : ${data.length}/ ${total_stargzer}`}\n    </>}>\n        <List\n        style={{overflowY:'scroll', height:300,maxHeight:350, scrollbarWidth:'none'}}\n        className=\"demo-loadmore-list\"\n        loading={loading}\n        itemLayout=\"horizontal\"\n        loadMore={data.length < total_stargzer ? loadMoreButton : null }      \n        dataSource={data}\n        renderItem={item => (\n        <List.Item>\n          <List.Item.Meta\n          title={item.login}\n           description={item?.description}\n           />\n\n        </List.Item>\n        )}\n        />\n  </Modal>)\n}\n\nexport default React.memo(ListStargazersModal)","import { Button, List } from 'antd'\nimport React, { useState } from 'react'\nimport ListStargazerModal from './ListStargazerModal'\n\ninterface ListRepoProps{\n  data:any[];\n  loading:boolean;\n  loadMore:()=>void;\n  total_repos:number;\n}\n\nconst ListRepo :React.FC<ListRepoProps> = ({loading, data, loadMore, total_repos})=>{\n\n    const [state, setState]= useState({\n    isShow:false,\n    url:'',\n    total_stargazer:0\n    })\n    \n    const toggleShowModal= (visible?:boolean)=>{\n      if(typeof visible !== undefined){\n        setState({...state,isShow:!!visible})\n      }else {\n        setState({...state, isShow: state.isShow})\n      }\n    }\n\n    const onLoadMore=()=>{\n        loadMore()\n    }\n\n    const loadStargazer = (url:string,total_stargazer:number)=>()=>{\n      setState(state=>({...state, url:url,total_stargazer: total_stargazer,isShow:!state.isShow}))\n    }\n\n\n    const loadMoreButton = !loading ? (\n      <div\n        style={{\n          textAlign: 'center',\n          marginTop: 12,\n          height: 32,\n          lineHeight: '32px',\n        }}\n      >\n        <Button disabled={loading} loading={loading} onClick={onLoadMore}>loading more</Button>\n      </div>\n    ) : null;\n\n \n    return <>\n     <List\n    style={{overflowY:'scroll', height:300,maxHeight:350, scrollbarWidth:'none'}}\n    className=\"demo-loadmore-list\"\n    loading={loading}\n    itemLayout=\"horizontal\"\n    loadMore={data.length < total_repos ? loadMoreButton : null }\n    dataSource={data}\n    renderItem={item => (\n      <List.Item\n       // eslint-disable-next-line\n        actions={[ <Button onClick={loadStargazer(item.stargazers_url,item.stargazers_count)} type='link' key=\"list-loadmore-more\">Load stargazers</Button>]}\n      >\n          <List.Item.Meta\n            title={item.name}\n            description={item?.description}\n          />\n           <div>{`Số stargazers: ${item.stargazers_count}`}</div>\n      </List.Item>\n    )}\n  />\n      <ListStargazerModal isShow={state.isShow} toggleShow={toggleShowModal} url={state.url} total_stargzer={state.total_stargazer}  />\n    </>\n}\n\nexport default React.memo(ListRepo)","import { Button, Col, Form, FormInstance, Input, Row } from 'antd'\nimport React from 'react'\n\ninterface SearchBarProsp{\n    form:FormInstance\n    loading:boolean;\n    loaded_repos:number;\n    total_repos:number\n}\n\nconst SearchBar :React.FC<SearchBarProsp>=({ form, loading, loaded_repos, total_repos})=>{\n    \n    return (\n       <>\n        <Row gutter={24}>\n        <Col span={21}>\n            <Form.Item rules={[{required:true, message:'Enter github ussername'},{\n                whitespace:true,message:'Enter github ussername'\n            }]} name='name'>\n                <Input placeholder='Nhập tên github user' />\n            </Form.Item>\n        </Col>\n        <Col span={3}>\n            <Button htmlType='submit' loading={loading} >Tìm kiếm</Button>\n        </Col>\n           \n     </Row>\n      <Row>\n         <p>{`Public repos: ${total_repos ? total_repos: 0}`}</p> \n     </Row>\n        <Row>\n          <p>{`Đã load: ${loaded_repos}/${total_repos ? total_repos: 0} repos`}</p>\n        </Row>\n       </>\n    )\n}\n\nexport default React.memo(SearchBar)","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/reducers';\nimport { GetCurrentUserByUsernameInput } from '../redux/action-types';\nimport { getCurrentUserByUsernameAction } from '../redux/actions';\n\n\n\n\nconst useGetCurrentUserByUserName = () => {\n  const loading = useSelector<RootState>((state) => state.reposState.user.loading) as boolean;\n  const total_public_repos = useSelector<RootState>((state) => state.reposState.user.data.public_repos) as  number ;\n  \n  const dispatch = useDispatch();\n\n  const onGetCurrentUserByUserName = useCallback((data: GetCurrentUserByUsernameInput) => {\n\n    dispatch(getCurrentUserByUsernameAction(data));\n  },\n  // eslint-disable-next-line\n  []);\n\n  return {\n    onGetCurrentUserByUserName,\n    loading,\n    total_public_repos\n  };\n};\n\nexport default useGetCurrentUserByUserName;\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/reducers';\nimport { GetReposByUsernameInput } from '../redux/action-types';\nimport { getReposByUsernameAction } from '../redux/actions';\n\n\n\n\nconst useGetRepoByUserName = () => {\n  const loading = useSelector<RootState>((state) => state.reposState.listRepo.loading) as boolean;\n  const data = useSelector<RootState>((state) => state.reposState.listRepo.data) as  any[] ;\n  const userName = useSelector<RootState>((state) => state.reposState.listRepo.userName) as  string ;\n  const dispatch = useDispatch();\n\n  const onGetRepoByUserName = useCallback((data: GetReposByUsernameInput) => {\n\n    dispatch(getReposByUsernameAction(data));\n  },\n  // eslint-disable-next-line\n  []);\n\n  return {\n    onGetRepoByUserName,\n    loading,\n    data,\n    userName\n  };\n};\n\nexport default useGetRepoByUserName;\n","import { Form } from 'antd'\nimport React, { useState } from 'react'\nimport { CardContainer } from '../../../commons/styled'\nimport ListRepo from '../components/ListRepo'\nimport SearchBar from '../components/SearchBar'\nimport useGetCurrentUserByUserName from '../hooks/useGetCurrentUser'\nimport useGetRepoByUserName from '../hooks/useGetReposByUserName'\n\n\n\nconst ReposPageIndex:React.FC =()=>{\n\n    const [state, setState]= useState({\n        page_index:1,\n    })\n\n    const [form] = Form.useForm();\n\n    const {onGetRepoByUserName, loading,data,userName}  = useGetRepoByUserName()\n    const {onGetCurrentUserByUserName, total_public_repos, loading: loadingGetUser} = useGetCurrentUserByUserName()\n\n    const onLoadMoreRepo = async()=>{\n        await setState(state=>{return ({...state, page_index:state.page_index+1})})\n        onGetRepoByUserName({userName:form.getFieldValue('name'),page_index:state.page_index +1})\n    }\n\n\n\n    const onFinish = (values:any)=>{\n       if(userName.trim()?.toLowerCase() !== values.name.trim()?.toLowerCase()){\n        onGetCurrentUserByUserName({userName:values.name?.trim()?.toLowerCase()});\n        onGetRepoByUserName({userName:values.name?.trim()?.toLowerCase(),page_index:1})\n       }\n       return\n    }\n    return (<CardContainer >\n        <Form form={form} onFinish={onFinish} >\n           <SearchBar total_repos={total_public_repos} loaded_repos={data.length} loading={loadingGetUser||loading} form={form}   />\n           {data.length ? <ListRepo total_repos={total_public_repos} data={data} loadMore={onLoadMoreRepo} loading={loading || loadingGetUser} /> :null}\n        </Form>\n        </CardContainer>)\n}\n\nexport default React.memo(ReposPageIndex)","export const APP_STARTED = 'APP_STARTED';\n\nexport const appStart = () => {\n  return {\n    type: APP_STARTED,\n  };\n};\n\n\n","\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './App.css';\nimport { Container } from './commons/styled';\nimport ReposPageIndex from './features/repos/pages';\nimport { appStart } from './redux/actions';\n\n\nfunction App() {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(appStart());\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n     <Container >\n       <ReposPageIndex />\n       </Container>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\n\nexport const apiGet = async (url: string) => {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(url, {\n        \n      })\n      .then((res) => {\n        resolve(res.data);\n      })\n      .catch((err) => {\n        if (err.response) {\n          if (err.response.status === 401) {\n  \n          } else {\n            reject(err.response.data);\n          }\n        } else {\n          if (err.request) {\n            reject(err.request);\n          } else {\n            console.log('Error', err.message);\n          }\n        }\n      });\n  });\n};\n","import env from \"../env\";\n\nexport const API_VERSION = '1';\nexport const BASE_API_URL = env.apiBaseUrl;\nexport const API_URL = `${BASE_API_URL}`;\n\n","export interface ENV {\n  apiBaseUrl: string;\n}\n\nconst env: ENV = {\n  apiBaseUrl: process.env.REACT_APP_BASE_API_URL || '',\n};\n\nexport default env;\n","import { API_URL } from \"../../services/apis-url\";\n\nexport const API_GET_REPOS_BY_USERNAME=`${API_URL}/users/`","import { apiGet } from '../../services/api-base';\nimport { GetReposByUsernameInput } from '../repos/redux/action-types';\nimport { GetCurrentUserByUsernameInput } from '../repos/redux/action-types/get-current-user';\n\nimport * as apiUrl from './url';\n\n\nexport const getRepoByUserNameApi = async (data:GetReposByUsernameInput ) => {\n    return apiGet(apiUrl.API_GET_REPOS_BY_USERNAME+`${data.userName}/repos?page=${data.page_index}`)\n}\n\nexport const  getCurrentUserByNameApi = async (data: GetCurrentUserByUsernameInput)=>{\n    return apiGet(apiUrl.API_GET_REPOS_BY_USERNAME+`${data.userName}`)\n}\n\nexport const getListStargazerApi =async(url:string)=>{\n    return apiGet(url)\n}","\n\n\n\nimport { put } from 'redux-saga/effects';\nimport { GetReposByUsernameAction, GetReposByUsernameRes } from \"../action-types\";\nimport *  as apis from '../../../services/apis'\nimport { getReposByUsernameErrorAction, getReposByUsernameSuccessAction } from '../actions';\n\nexport function* getReposByUsernameSaga(action: GetReposByUsernameAction) {\n  try {\n    const res: GetReposByUsernameRes = yield apis.getRepoByUserNameApi(action.payload);\n    yield put(getReposByUsernameSuccessAction(res));\n  } catch (error) {\n    yield put(getReposByUsernameErrorAction(error?.message));\n  }\n}\n\n","\n\nimport { message } from 'antd';\nimport { put } from 'redux-saga/effects';\nimport * as apis from '../../../services/apis';\nimport { GetCurrentUserByUsernameAction, GetCurrentUserByUsernameRes } from \"../action-types\";\nimport { getCurrentUserByUsernameErrorAction, getCurrentUserByUsernameSuccessAction } from '../actions';\n\nexport function* getCurrentUserByUsernameSaga(action: GetCurrentUserByUsernameAction) {\n  try {\n    const res: GetCurrentUserByUsernameRes = yield apis.getCurrentUserByNameApi(action.payload);\n    yield put(getCurrentUserByUsernameSuccessAction(res));\n  } catch (error) {\n    yield put(getCurrentUserByUsernameErrorAction(error?.message));\n    message.error(`Lỗi: ${error?.message}`, 3)\n  }\n}\n","\nimport { put } from 'redux-saga/effects';\nimport * as apis from '../../../services/apis';\nimport { GetListStargazerAction, GetListStargazerRes } from \"../action-types\";\nimport { getListStargazerErrorAction, getListStargazerSuccessAction } from '../actions';\n\nexport function* getListStargazerSaga(action: GetListStargazerAction) {\n  try {\n    const res: GetListStargazerRes = yield apis.getListStargazerApi(action.payload.url);\n    yield put(getListStargazerSuccessAction(res));\n  } catch (error) {\n    yield put(getListStargazerErrorAction(error?.message));\n  }\n}\n","import { all, takeLatest } from 'redux-saga/effects';\nimport { getReposByUsernameSaga } from './get-repos-by-username';\nimport * as actionTypes from '../action-types'\nimport { getCurrentUserByUsernameSaga } from './get-current-user';\nimport { getListStargazerSaga } from './get-list-stargazer';\n\nexport default function* repoSaga() {\n  return all([\n    yield takeLatest(actionTypes.GET_REPOS_BY_USERNAME, getReposByUsernameSaga) , \n    yield takeLatest(actionTypes.GET_CURRENT_USER_BY_USERNAME, getCurrentUserByUsernameSaga),\n    yield takeLatest(actionTypes.GET_LIST_STARGAZERS,getListStargazerSaga) \n  ]) ;\n}\n","import { all, take } from 'redux-saga/effects';\nimport repoSaga from '../features/repos/redux/sagas';\n\nimport { APP_STARTED } from './actions';\n\nexport default function* rootSaga() { \n  yield take(APP_STARTED);\n  yield all([repoSaga()]);\n}\n","import { GetReposByUsernameActionTypes, GetReposByUsernameState, GET_REPOS_BY_USERNAME, GET_REPOS_BY_USERNAME_ERROR, GET_REPOS_BY_USERNAME_SUCCESS } from \"../action-types\";\n\n  const initialState = {\n    data:[],\n    loading: false,\n    userName:''\n  };\n   // eslint-disable-next-line\n  export default (state = initialState, action: GetReposByUsernameActionTypes): GetReposByUsernameState => {\n    switch (action.type) {\n      case GET_REPOS_BY_USERNAME:\n      \n      if(action.payload.userName !== state.userName){\n        return {\n          ...state,\n          data:[],\n          loading:true,\n          userName:action.payload.userName\n        }\n      }\n       return {\n        ...state,\n        loading: true,\n        userName:action.payload.userName\n       }\n        \n      case GET_REPOS_BY_USERNAME_SUCCESS:\n        const _data= [...state.data]\n        return {\n          ...state,\n          data:[..._data, ...action.payload as any],\n          loading: false,\n        };\n      case GET_REPOS_BY_USERNAME_ERROR:\n        return {\n          ...state,\n          loading: false,\n          data:[]\n        };\n      default:\n        return state;\n    }\n  };\n  ","import { GetCurrentUserByUsernameActionTypes, GetCurrentUserByUsernameState, GET_CURRENT_USER_BY_USERNAME, GET_CURRENT_USER_BY_USERNAME_ERROR, GET_CURRENT_USER_BY_USERNAME_SUCCESS } from \"../action-types\";\n\nconst initialState = {\n    data:{},\n    loading: false,\n  };\n   // eslint-disable-next-line\n  export default (state = initialState, action: GetCurrentUserByUsernameActionTypes): GetCurrentUserByUsernameState => {\n    switch (action.type) {\n      case GET_CURRENT_USER_BY_USERNAME:\n\n        return {\n          ...state,\n          loading: true,\n          \n        };\n      case GET_CURRENT_USER_BY_USERNAME_SUCCESS:\n        return {\n          ...state,\n          data:action.payload,\n          loading: false,\n        };\n      case GET_CURRENT_USER_BY_USERNAME_ERROR:\n        return {\n          ...state,\n          loading: false,\n          data:[]\n        };\n      default:\n        return state;\n    }\n  };\n  ","import { GetListStargazerActionTypes, GetListStargazerState, GET_LIST_STARGAZERS, GET_LIST_STARGAZERS_ERROR, GET_LIST_STARGAZERS_SUCCESS } from \"../action-types\";\n\n  const initialState = {\n    data:[],\n    loading: false,\n    url:'',\n  };\n   // eslint-disable-next-line\n  export default (state = initialState, action: GetListStargazerActionTypes): GetListStargazerState => {\n    switch (action.type) {\n      case GET_LIST_STARGAZERS: \n      if(action.payload.url !== state.url){\n        return {\n          ...state,\n          data:[],\n          loading:true,\n          url:action.payload.url\n        }\n      }\n       return {\n        ...state,\n        loading: true,\n        url:action.payload.url\n       }\n      \n      case GET_LIST_STARGAZERS_SUCCESS:\n        const _data= [...state.data]\n        return {\n          ...state,\n          data:[..._data , ...action.payload as any],\n          loading: false,\n        };\n      case GET_LIST_STARGAZERS_ERROR:\n        return {\n          ...state,\n          loading: false,\n          data:[]\n        };\n      default:\n        return state;\n    }\n  };\n  ","import { combineReducers } from \"@reduxjs/toolkit\";\nimport { GetCurrentUserByUsernameState, GetListStargazerState, GetReposByUsernameState } from \"../action-types\";\nimport listRepo from './get-repos-by-username'\nimport user from './get-curent-user'\nimport stargazer from './get-list-stargazer'\nexport interface RepoModuleState {\n    listRepo:GetReposByUsernameState;\n    user:GetCurrentUserByUsernameState;\n    stargazer:GetListStargazerState;\n  }\n  \n  export default combineReducers<RepoModuleState>({\n    listRepo: listRepo,\n    user:user,\n    stargazer:stargazer\n  });","import { combineReducers } from 'redux';\nimport reposState,{ RepoModuleState } from '../features/repos/redux/reducers';\n\n\nexport interface RootState {\n reposState:RepoModuleState\n}\n\nexport default combineReducers<RootState>({\n  reposState\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas';\nimport rootReducer from './reducers';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, {}, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\n// import * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}